{"version":3,"sources":["reducers/shopping.js","reducers/Ranking.js","reducers/index.js","components/Ranking.js","actions/Ranking.js","containers/Ranking.js","containers/Nav.js","components/Nav.js","App.js","serviceWorker.js","createStore.js","index.js"],"names":["initialState","categories","id","name","getRanking","response","ranking","itemLength","ResultSet","totalResultsReturned","index","item","Result","push","code","Code","Name","url","Url","imageUrl","Image","Medium","category","undefined","error","state","action","type","payload","noop","Ranking","this","props","onMount","categoryId","nextProps","onUpdate","map","i","key","style","maxWidth","margin","Card","image","title","height","raised","color","fullWidth","href","React","Component","defaultProps","startRequest","recieveData","finishRequest","fetchRanking","dispatch","getState","a","shopping","find","replace","queryString","qs","stringify","appid","category_id","fetchJsonp","json","data","connect","ownProps","actions","onClick","path","width","List","button","to","primary","App","className","paddingLeft","left","marginTop","padding","component","render","match","params","Boolean","window","location","hostname","history","createHashHistory","store","reduxCreateStore","combineReducers","reducers","router","connectRouter","applyMiddleware","logger","thunk","routerMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bba98e92.chunk.js","sourcesContent":["const initialState = {\n  // カテゴリ情報\n  // 本来はカテゴリID取得APIで取得すべき\n  categories: [\n    {\n      id: \"1\",\n      name: \"すべてのカテゴリ\"\n    },\n    {\n      id: \"2502\",\n      name: \"パソコン、周辺機器\"\n    },\n    {\n      id: \"10002\",\n      name: \"本、雑誌、コミック\"\n    }\n  ]\n};\n\nexport default () => initialState;\n","// レスポンスからランキング情報だけを抜き出す\nconst getRanking = response => {\n  const ranking = [];\n  const itemLength = response.ResultSet.totalResultsReturned;\n  for (let index = 0; index < itemLength; index++) {\n    const item = response.ResultSet[\"0\"].Result[index + \"\"];\n    ranking.push({\n      code: item.Code,\n      name: item.Name,\n      url: item.Url,\n      imageUrl: item.Image.Medium\n    });\n  }\n  return ranking;\n};\n\n// 初期状態\nconst initialState = {\n  category: undefined,\n  ranking: undefined,\n  error: false\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    // リクエスト開始時に状態をリセット\n    case \"START_REQUEST\":\n      return {\n        category: action.payload.category,\n        ranking: undefined,\n        error: false\n      };\n    case \"RECIEVE_DATA\":\n      return action.payload.error\n        ? { ...state, error: true }\n        : { ...state, ranking: getRanking(action.payload.response) };\n\n    default:\n      return state;\n  }\n};\n","//何もしないReducerを一旦設定\nexport const noop = (state = {}) => state;\nexport { default as shopping } from \"./shopping\";\nexport { default as Ranking } from \"./Ranking\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Card, { CardMedia, CardContent, CardActions } from \"material-ui/Card\";\nimport Typography from \"material-ui/Typography\";\nimport Button from \"material-ui/Button\";\n\n// ライフサイクルメソッドを使うのでclassに変更\nexport default class Ranking extends React.Component {\n  // componentDidMount, componentWillRecievePropsを追加\n  componentDidMount() {\n    this.props.onMount(this.props.categoryId);\n  }\n  componentWillReciveProps(nextProps) {\n    if (this.props.categoryId !== nextProps.categoryId) {\n      // props.categoryIdに変化があるので、ページ遷移が発生している\n      this.props.onUpdate(nextProps.categoryId);\n    }\n  }\n\n  render() {\n    const { category, ranking, error } = this.props;\n\n    return (\n      <div>\n        {/* ランキングのタイトル（2の機能） */}\n        <h2>\n          {typeof category !== \"undefined\"\n            ? `${category.name}のランキング`\n            : \"\"}\n        </h2>\n        {(() => {\n          if (error) {\n            // エラーを表示\n            return <p>エラーが発生しました。リロードしてください。</p>;\n          } else if (typeof ranking === \"undefined\") {\n            // リクエスト完了前\n            return <p>読み込み中...</p>;\n          } else {\n            // ランキングの表示（3の機能)\n            return ranking.map((item, i) => (\n              <Card\n                key={`ranking-item-${item.code}`}\n                style={{ maxWidth: \"500px\", margin: \"32px auto\" }}\n              >\n                <CardMedia\n                  image={item.imageUrl}\n                  title={`${i + 1}位 ${item.name}`}\n                  style={{ height: \"200px\" }}\n                />\n                <CardContent>\n                  <Typography type=\"title\">\n                    {`${i + 1}位 ${item.name}`}\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button raised color=\"secondary\" fullWidth href={item.url}>\n                    商品ページへ\n                  </Button>\n                </CardActions>\n              </Card>\n            ));\n          }\n        })()}\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  categoryId: PropTypes.string.isRequired,\n  // onMount, onUpdateを追加\n  onMount: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n\n  // category, ranking, errorの方を追加\n  category: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n  }),\n  ranking: PropTypes.arrayOf(\n    PropTypes.shape({\n      code: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n      imageUrl: PropTypes.string.isRequired\n    })\n  ),\n  error: PropTypes.bool.isRequired\n};\nRanking.defaultProps = {\n  // categoryId=1は総合ランキング\n  categoryId: \"1\"\n};\n","import fetchJsonp from \"fetch-jsonp\";\nimport qs from \"qs\";\nimport { replace } from \"react-router-redux\";\n\nconst API_URL =\n  \"https://shopping.yahooapis.jp/ShoppingWebService/V1/json/categoryRanking\";\n\n// さきほど取得したアプリケーションIDを記述\nconst APP_ID = \"dj00aiZpPVcwT0U3bWxoelRzaSZzPWNvbnN1bWVyc2VjcmV0Jng9NTk-\";\n\n// リクエスト開始\nconst startRequest = category => ({\n  type: \"START_REQUEST\",\n  payload: { category }\n});\n\n// レスポンス受信\nconst recieveData = (category, error, response) => ({\n  type: \"RECIEVE_DATA\",\n  payload: { category, error, response }\n});\n\n// リクエスト完了\nconst finishRequest = category => ({\n  type: \"FINISH_REQUEST\",\n  payload: { category }\n});\n\n// ランキングを取得する\nexport const fetchRanking = categoryId => {\n  // getState関数でstate.shopping.categoriesにアクセスする\n  // redux-thunkを使った非同期処理\n  return async (dispatch, getState) => {\n    //   カテゴリIDに対応するstate.shopping.categoriesの要素を取得\n    const categories = getState().shopping.categories;\n    const category = categories.find(category => category.id === categoryId);\n    // 対応するデータがない場合はトップページへリダイレクト\n    if (typeof category === \"undefined\") {\n      dispatch(replace(\"/\"));\n      return;\n    }\n\n    dispatch(startRequest(category));\n\n    const queryString = qs.stringify({\n      appid: APP_ID,\n      category_id: categoryId\n    });\n\n    try {\n      const response = await fetchJsonp(`${API_URL}?${queryString}`);\n      const data = await response.json();\n      dispatch(recieveData(category, null, data));\n    } catch (err) {\n      dispatch(recieveData(category, err));\n    }\n    dispatch(finishRequest(category));\n  };\n};\n","import { connect } from \"react-redux\";\nimport Ranking from \"../components/Ranking\";\nimport * as actions from \"../actions/Ranking\";\n\nconst mapStateToProps = (state, ownProps) => ({\n  categoryId: ownProps.categoryId,\n  // カテゴリ情報、ランキング情報をRankingコンポーネントに渡す\n  category: state.Ranking.category,\n  ranking: state.Ranking.ranking,\n  error: state.Ranking.error\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  //  onMountとonUpdateをfetchRankingを接続\n  onMount(categoryId) {\n    dispatch(actions.fetchRanking(categoryId));\n  },\n  onUpdate(categoryId) {\n    dispatch(actions.fetchRanking(categoryId));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\n","import { connect } from \"react-redux\";\nimport { push } from \"connected-react-router\";\nimport Nav from \"../components/Nav\";\n\nconst mapStateToProps = state => ({\n  //  state.shopping.categoriesをprops.categoriesに紐づけ\n  categories: state.shopping.categories\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClick(path) {\n    // onClick字にconnected-react-routerのpushでページ遷移を発生させる\n    dispatch(push(path));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Drawer from \"material-ui/Drawer\";\nimport List, { ListItem, ListItemText } from \"material-ui/List\";\n\nexport default function Nav({ categories, onClick }) {\n  // 遷移先パスの生成\n  // -カテゴリIDが\"1\"の場合は /all\n  // -それ以外は /category/カテゴリID\n  const to = category =>\n    category.id === \"1\" ? \"/all\" : `/category/${category.id}`;\n\n  return (\n    <Drawer type=\"permanent\">\n      <List style={{ width: 240 }}>\n        {/* props.categoriesからリンク一覧を生成 */}\n        {categories.map(category => (\n          <ListItem\n            button\n            key={`nav-time-${category.id}`}\n            onClick={() => onClick(to(category))}\n          >\n            <ListItemText primary={category.name} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  );\n}\n\nNav.propTypes = {\n  //  state.shopping.categoriesの構造\n  categories: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  onClick: PropTypes.func.isRequired\n};\n","// React.jsを使用するためのライブラリをインポート\n// React.Componentを書く手間を省くために、Componentのみを名前指定でインポート\nimport React, { Component } from \"react\";\n// 画面遷移を可能にしてくれるライブラリ\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport Ranking from \"./containers/Ranking\";\nimport Nav from \"./containers/Nav\";\n// ベースのスタイルとなるRebootコンポーネントをインポート\nimport Reboot from \"material-ui/Reboot\";\nimport AppBar from \"material-ui/AppBar\";\nimport Toolbar from \"material-ui/Toolbar\";\nimport Typography from \"material-ui/Typography\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" style={{ paddingLeft: 240 }}>\n        <Reboot />\n        <AppBar style={{ left: 240 }}>\n          <Toolbar>\n            <Typography type=\"title\" color=\"inherit\">\n              Yahoo!ショッピングランキング\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Nav />\n        <div style={{ marginTop: 64, padding: 32 }}>\n          <Switch>\n            <Route path=\"/all\" component={Ranking} />\n            <Route path=\"/category/1\" render={() => <Redirect to=\"/all\" />} />\n            <Route\n              path=\"/category/:id\"\n              render={({ match }) => <Ranking categoryId={match.params.id} />}\n            />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  // 名前が被ってしまうので別名でimportする\n  createStore as reduxCreateStore,\n  combineReducers,\n  applyMiddleware\n} from \"redux\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\n/* 複数のReducerをストア(store)に渡したいため、\n複数のReducerが定義されている\"./reducers/index.js\"ファイルをインポート\n */\nimport * as reducers from \"./reducers\";\n\n// historyはsrc/index.jsから渡すようにする\nexport default function createStore(history) {\n  return reduxCreateStore(\n    // 複数のReducerを使えるように結合(combine)する\n    combineReducers({\n      // スプレッド構文で全てのReducerを展開する\n      ...reducers,\n      router: connectRouter(history)\n    }),\n    applyMiddleware(\n      logger,\n      thunk,\n      // react-router-reduxのRedux Middleware\n      routerMiddleware(history)\n    )\n  );\n}\n","// React.jsを使用するためのライブラリをインポート\nimport React from \"react\";\n// TODO:説明記載\nimport ReactDOM from \"react-dom\";\n// TODO:説明記載\nimport { Provider } from \"react-redux\";\n// TODO:説明記載\nimport { ConnectedRouter } from \"connected-react-router\";\n\n// TODO:説明記載\n// import { createBrowserHistory } from \"history\";\n// Githubに公開するために一旦上記をコメントアウト、代わりに以下を使う\n\n// Browser Historyの代わりに Hash Historyを利用\nimport { createHashHistory } from \"history\";\n\n// TODO:説明記載\nimport createStore from \"./createStore\";\n// TODO:説明記載\nimport App from \"./App\";\n// TODO:説明記載\nimport * as serviceWorker from \"./serviceWorker\";\n// TODO:説明記載\nimport \"./index.css\";\n\n// historyのインスタンスを生成\n// ルーティングするための履歴情報を保持するインスタンス\nconst history = createHashHistory();\n\n// Storeの生成\n// アプリ全体の状態(state)を管理するストア(store)を生成する\n// storeには履歴情報(history)を引数として渡す\nconst store = createStore(history);\n\nReactDOM.render(\n  // StoreをAppコンポーネントに紐付け\n  /*  アプリ全体のためのストア(store)を使えるようにするために、\n   Providerコンポーネントにstoreを渡し、\n   AppコンポーネントをProviderコンポーネントでラップする */\n  <Provider store={store}>\n    {/* TODO: 説明を記載 */}\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}